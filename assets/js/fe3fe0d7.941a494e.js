/*! For license information please see fe3fe0d7.941a494e.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[9223],{1336:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var i=c(4848),r=c(8453);const a={},l="luma",s={id:"api-reference/core/luma",title:"luma",description:"The luma namespace provides luma.gl applications",source:"@site/../docs/api-reference/core/luma.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/luma",permalink:"/docs/api-reference/core/luma",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/core/luma.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Overview",permalink:"/docs/api-reference/core/"},next:{title:"Device",permalink:"/docs/api-reference/core/device"}},t={},o=[{value:"Device Registration",id:"device-registration",level:2},{value:"Usage",id:"usage",level:2},{value:"Registering Device Backends",id:"registering-device-backends",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>luma.registerDevices()</code>",id:"lumaregisterdevices",level:3},{value:"<code>luma.createDevice()</code>",id:"lumacreatedevice",level:3},{value:"<code>luma.attachDevice()</code>",id:"lumaattachdevice",level:3},{value:"<code>luma.enforceWebGL2()</code>",id:"lumaenforcewebgl2",level:3},{value:"Remarks",id:"remarks",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"luma",children:"luma"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/api-reference/core/luma",children:(0,i.jsx)(n.code,{children:"luma"})})," namespace provides luma.gl applications\nwith the ability to register GPU Device backends and create ",(0,i.jsx)(n.code,{children:"Device"})," class instances\nusing the registered backends."]}),"\n",(0,i.jsxs)(n.p,{children:["The returned ",(0,i.jsx)(n.a,{href:"/docs/api-reference/core/device",children:(0,i.jsx)(n.code,{children:"Device"})})," instances provides\nluma.gl applications with a complete GPU API."]}),"\n",(0,i.jsx)(n.h2,{id:"device-registration",children:"Device Registration"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@luma.gl/core"})," module defines abstract API interfaces such as ",(0,i.jsx)(n.code,{children:"Device"}),", ",(0,i.jsx)(n.code,{children:"Buffer"})," etc and is not usable on its own."]}),"\n",(0,i.jsxs)(n.p,{children:["One or more GPU backend modules must be imported from a corresponding\nGPU API backend module (",(0,i.jsx)(n.code,{children:"@luma.gl/webgl"})," and/or ",(0,i.jsx)(n.code,{children:"@luma.gl/webgpu"}),") and then registered with luma.gl."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["To register a device backend, import the corresponding device backend module and then call ",(0,i.jsx)(n.code,{children:"luma.registerDevices()"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {luma} from '@luma.gl/core';\nimport {WebGLDevice} from '@luma.gl/webgl';\nluma.registerDevices([WebGLDevice]);\n"})}),"\n",(0,i.jsx)(n.p,{children:"It is possible to register more than one device to create an application\nthat can work in both WebGL and WebGPU environments."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {luma} from '@luma.gl/core';\nimport {WebGLDevice} from '@luma.gl/webgl';\nimport {WebGPUDevice} from '@luma.gl/webgl';\nluma.registerDevices([WebGLDevice, WebGPUDevice]);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Register the WebGL backend, then create a WebGL2 context, auto creating a canvas"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {luma} from '@luma.gl/core';\nimport {WebGLDevice} from '@luma.gl/webgl';\n\nluma.registerDevices([WebGLDevice]);\nconst webglDevice = luma.createDevice({type: 'webgl', canvas: ...});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create a WebGL 2 context (throws if WebGL2 not supported)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {luma} from '@luma.gl/core';\nimport {WebGLDevice} from '@luma.gl/webgl';\n\nluma.registerDevices([WebGLDevice]);\nconst webgpuDevice = luma.createDevice({type: 'webgl', canvas: ...});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"registering-device-backends",children:"Registering Device Backends"}),"\n",(0,i.jsx)(n.p,{children:"Install device modules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"yarn add @luma.gl/core\nyarn add @luma.gl/webgl\nyarn add @luma.gl/webgpu\n"})}),"\n",(0,i.jsx)(n.p,{children:"To create a WebGPU device:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {luma} from '@luma.gl/core';\nimport {WebGPUDevice} from '@luma.gl/webgpu';\n\nluma.registerDevices([WebGPUDevice]);\nconst device = await luma.createDevice({type: 'webgpu', canvas: ...});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Pre-register devices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {luma} from '@luma.gl/core';\nimport {WebGLDevice} from '@luma.gl/webgl';\nimport {WebGPUDevice} from '@luma.gl/webgpu';\n\nluma.registerDevices([WebGLDevice, WebGPUDevice]);\nconst webgpuDevice = luma.createDevice({type: 'best-available', canvas: ...});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Provide devices to createDevice"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const webgpuDevice = luma.createDevice({\n  type: 'best-available', \n  canvas: ..., \n  devices: [WebGLDevice, WebGPUDevice]\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"lumaregisterdevices",children:(0,i.jsx)(n.code,{children:"luma.registerDevices()"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"luma.registerDevices(devices: (typeof Device)[]): void;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Registers one or more devices (device constructors) so that they can be used\nto create ",(0,i.jsx)(n.code,{children:"Device"})," instances against that GPU backend. The registered device types\nwill be available to ",(0,i.jsx)(n.code,{children:"luma.createDevice()"})," and ",(0,i.jsx)(n.code,{children:"luma.attachDevice()"})," calls."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"luma.registerDevices()"})," enables separation of the application code that\nregisters GPU backends from the application code that creates devices."]}),"\n",(0,i.jsx)(n.h3,{id:"lumacreatedevice",children:(0,i.jsx)(n.code,{children:"luma.createDevice()"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"luma.createDevice({type, ...DeviceProps});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To create a Device instance, the application calls ",(0,i.jsx)(n.code,{children:"luma.createDevice()"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"}),": ",(0,i.jsx)(n.code,{children:"'webgl' \\| 'webgpu' \\| 'best-available'"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Unless a device ",(0,i.jsx)(n.code,{children:"type"})," is specified a ",(0,i.jsx)(n.code,{children:"Device"})," will be created using the ",(0,i.jsx)(n.code,{children:"'best-available'"})," adapter.\nluma.gl favors WebGPU over WebGL devices, whenever WebGPU is available."]}),"\n",(0,i.jsx)(n.p,{children:"Note: A device type is available if:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The backend module has been registered"}),"\n",(0,i.jsx)(n.li,{children:"The browser supports that GPU API"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"lumaattachdevice",children:(0,i.jsx)(n.code,{children:"luma.attachDevice()"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"luma.attachDevice(handle: WebGL2RenderingContext | GPUDevice, devices: unknown[]);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A luma.gl Device can be attached to an externally created ",(0,i.jsx)(n.code,{children:"WebGL2RenderingContext"})," or ",(0,i.jsx)(n.code,{children:"GPUDevice"}),'.\nThis allows applications to use the luma.gl API to "interleave" rendering with other GPU libraries.']}),"\n",(0,i.jsxs)(n.p,{children:["If you need to attach a luma.gl ",(0,i.jsx)(n.code,{children:"Device"})," to a WebGL 1 ",(0,i.jsx)(n.code,{children:"WebGLRenderingContext"}),", see ",(0,i.jsx)(n.code,{children:"luma.enforceWebGL2()"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"lumaenforcewebgl2",children:(0,i.jsx)(n.code,{children:"luma.enforceWebGL2()"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"luma.enforceWebGL2(enforce: boolean = true);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Overrides ",(0,i.jsx)(n.code,{children:"HTMLCanvasElement.prototype.getContext()"})," to return WebGL2 contexts even when WebGL1 context are requested. Reversible with ",(0,i.jsx)(n.code,{children:"luma.enforceWebGL2(false);"})]}),"\n",(0,i.jsxs)(n.p,{children:["Since luma.gl only supports WebGL2 contexts (",(0,i.jsx)(n.code,{children:"WebGL2RenderingContext"}),"), it is not possible to call",(0,i.jsx)(n.code,{children:"luma.attachDevice()"})," on a WebGL1 context (",(0,i.jsx)(n.code,{children:"WebGLRenderingContext"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["This becomes a problem when using luma.gl with a WebGL library that always creates WebGL1 contexts (such as Mapbox GL JS v1).\nCalling ",(0,i.jsx)(n.code,{children:"luma.enforceWebGL2()"})," before initializing the external library makes that library create a WebGL2 context, that luma.gl can then attach a Device to."]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Since WebGL2 is a essentially a superset of WebGL1, a library written for WebGL 1 will often still work with a WebGL 2 context. However there may be issues if the external library relies on WebGL1 extensions that are not available in WebGL2. To make a WebGL 2 context support WebGL1-only extensions, those extensions would also need to be emulated on top of the WebGL 2 API, and this is not currently done."})}),"\n",(0,i.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["At least one backend must be imported and registered with ",(0,i.jsx)(n.code,{children:"luma.registerDevices()"})," for ",(0,i.jsx)(n.code,{children:"luma.createDevice()"})," or ",(0,i.jsx)(n.code,{children:"luma.attachDevice()"})," calls to succeed (unless ",(0,i.jsx)(n.code,{children:"Device"})," implementations are supplied to those calls)."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1020:(e,n,c)=>{var i=c(6540),r=Symbol.for("react.element"),a=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,s=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,t={key:!0,ref:!0,__self:!0,__source:!0};function o(e,n,c){var i,a={},o=null,d=null;for(i in void 0!==c&&(o=""+c),void 0!==n.key&&(o=""+n.key),void 0!==n.ref&&(d=n.ref),n)l.call(n,i)&&!t.hasOwnProperty(i)&&(a[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===a[i]&&(a[i]=n[i]);return{$$typeof:r,type:e,key:o,ref:d,props:a,_owner:s.current}}n.Fragment=a,n.jsx=o,n.jsxs=o},4848:(e,n,c)=>{e.exports=c(1020)},8453:(e,n,c)=>{c.d(n,{R:()=>l,x:()=>s});var i=c(6540);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);